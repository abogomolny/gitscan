using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;

namespace MS.Ess.Scan.DataContracts.Private
{
    public enum WorkStatus
    {
        Unknown,
        PendingAnalysis,
        PendingDecompression,
        PendingScan,
        Clean,
        ConfirmedMalware,
        FailCanRetry,
        FailDoNotRetry,
    }

    public interface IMessage
    {
        DateTimeOffset EnqueuedAt { get; set; }
        DateTimeOffset DequeuedAt { get; set; }
    }

    public abstract class LocalMessage : IMessage
    {
        public DateTimeOffset EnqueuedAt { get; set; }
        public DateTimeOffset DequeuedAt { get; set; }
    }

    public interface IRequestMessage : IMessage
    {
        Guid RequestId { get; set; }

        string ClientId { get; set; }

        /// <summary>
        /// CancellationToken associated with a Transaction. IsCancelled = true
        /// when Transaction is completed.
        /// </summary>
        //CancellationToken CancellationToken { get; set; }
    }

    public class ConfirmedMalwareInfo
    {
        public string FileName { get; set; }

        public string MalwareInfo { get; set; }

        public IEnumerable<string> AvEngines { get; set; }
    }

    public class MalwareDeterminationResult : LocalMessage, IRequestMessage
    {
        public Guid RequestId { get; set; }
        public string ClientId { get; set; }
        //public CancellationToken CancellationToken { get; set; }
        public WorkStatus WorkStatus { get; set; }

        public IEnumerable<ConfirmedMalwareInfo> ConfirmedMalwares { get; set; }
    }
}
